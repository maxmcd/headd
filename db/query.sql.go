// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const getHost = `-- name: GetHost :one
SELECT id, user, hostname, created_at FROM hosts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHost(ctx context.Context, id int64) (Host, error) {
	row := q.db.QueryRowContext(ctx, getHost, id)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Hostname,
		&i.CreatedAt,
	)
	return i, err
}

const insertApp = `-- name: InsertApp :one
INSERT INTO app (name, user, meta) VALUES (?, ?, ?) RETURNING id, name, user, meta, created_at
`

type InsertAppParams struct {
	Name string
	User string
	Meta string
}

func (q *Queries) InsertApp(ctx context.Context, arg InsertAppParams) (App, error) {
	row := q.db.QueryRowContext(ctx, insertApp, arg.Name, arg.User, arg.Meta)
	var i App
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.User,
		&i.Meta,
		&i.CreatedAt,
	)
	return i, err
}

const insertHost = `-- name: InsertHost :one
INSERT INTO hosts (user, hostname) VALUES (?, ?) RETURNING id, user, hostname, created_at
`

type InsertHostParams struct {
	User     string
	Hostname string
}

func (q *Queries) InsertHost(ctx context.Context, arg InsertHostParams) (Host, error) {
	row := q.db.QueryRowContext(ctx, insertHost, arg.User, arg.Hostname)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Hostname,
		&i.CreatedAt,
	)
	return i, err
}
